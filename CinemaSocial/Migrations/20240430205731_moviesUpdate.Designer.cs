// <auto-generated />
using System;
using CinemaSocial.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaSocial.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430205731_moviesUpdate")]
    partial class moviesUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("CinemaSocial.Models.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovie")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieIdMovie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdMovie");

                    b.ToTable("diretors");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovie")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieIdMovie")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdMovie");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovie")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieIdMovie")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdMovie");

                    b.ToTable("images");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Movie", b =>
                {
                    b.Property<Guid>("IdMovie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMovie");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Star", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovie")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieIdMovie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdMovie");

                    b.ToTable("stars");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("salt");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user_account");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdMovie")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieIdMovie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieIdMovie");

                    b.ToTable("writers");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Director", b =>
                {
                    b.HasOne("CinemaSocial.Models.Entities.Movie", null)
                        .WithMany("Director")
                        .HasForeignKey("MovieIdMovie");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Genre", b =>
                {
                    b.HasOne("CinemaSocial.Models.Entities.Movie", null)
                        .WithMany("Genre")
                        .HasForeignKey("MovieIdMovie");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Image", b =>
                {
                    b.HasOne("CinemaSocial.Models.Entities.Movie", null)
                        .WithMany("Images")
                        .HasForeignKey("MovieIdMovie");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Star", b =>
                {
                    b.HasOne("CinemaSocial.Models.Entities.Movie", null)
                        .WithMany("Stars")
                        .HasForeignKey("MovieIdMovie");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Writer", b =>
                {
                    b.HasOne("CinemaSocial.Models.Entities.Movie", null)
                        .WithMany("Writers")
                        .HasForeignKey("MovieIdMovie");
                });

            modelBuilder.Entity("CinemaSocial.Models.Entities.Movie", b =>
                {
                    b.Navigation("Director");

                    b.Navigation("Genre");

                    b.Navigation("Images");

                    b.Navigation("Stars");

                    b.Navigation("Writers");
                });
#pragma warning restore 612, 618
        }
    }
}
