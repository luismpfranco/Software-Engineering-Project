@page "/movie/{id}"
@using CinemaSocial.Models.Entities
@using CinemaSocial.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IMovieService MovieService
@inject WatchlistService WatchlistService
@inject IReviewService ReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Administrator,User")]

@{
    Image image = null!;
    string genreDescription = null!;
    string directorsNames = null!;
    string starsNames = null!;
    if (MovieInfos != null)
    {
        image = MovieInfos.Images.FirstOrDefault(i => i.NumberUrl == "190")!;
        genreDescription = string.Join(", ", MovieInfos.Genre.Select(g => g.Description));
        directorsNames = string.Join(", ", MovieInfos.Director.Select(d => d.Name));
        starsNames = string.Join(", ", MovieInfos.Stars.Select(s => s.Name));
    }
}

<div class="container py-3" style="width: 100%; max-width: 1200px; margin: 0 auto;">
    @if (Id is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <PageTitle>@MovieInfos?.Title</PageTitle>
        <h2 class="display-12 my-3 text-center">@MovieInfos?.Title</h2>
        <div class="mb-5">
            <div class="movie-box">
                <img src="@image.Url" class="" alt="Movie Poster"/>
                <div class="movie-details">
                    @if (!string.IsNullOrEmpty(@MovieInfos?.ImdbId))
                    {
                        <div class="text-end px-2">
                            <a href="@MovieInfos.Link" target="_blank" class="btn btn-outline-warning rounded-pill">IMDB</a>
                        </div>
                    }
                    <p>Rating: @MovieInfos?.Rating</p>
                    <p>Year: @MovieInfos?.Year</p>
                    <p>Genre: @genreDescription</p>
                    <p>Description: @MovieInfos?.Description</p>
                    <p>Director: @directorsNames</p>
                    <p>Cast: @starsNames</p>
                </div>
            </div>
        </div>
        
        <div class="m-5 d-flex justify-content-center align-items-center flex-column flex-wrap">
            <h2 class="text-dark">Watchlist</h2>
            <button class="btn btn-primary m-3" @onclick="() => AddToFavourites(UserId, MovieId)">Add to Favourites</button>
            <span class="@(_isFavouritesSuccessful == true ? "text-success" : "text-danger")">@_messageFavourites</span>

            <button class="btn btn-primary m-3" @onclick="() => AddWatched(MovieId)">Add to Watched</button>
            <span class="@(_isWatchedSuccessful == true ? "text-success" : "text-danger")">@_messageWatched</span>

            <button class="btn btn-primary m-3" @onclick="() => AddToWatch(MovieId)">Add to Watchlist</button>
            <span class="@(_isToWatchSuccessful == true ? "text-success" : "text-danger")">@_messageToWatch</span>
        </div>

        @if (_reviews != null)
        {
            <div class="m-5 d-flex justify-content-center align-items-center flex-column flex-wrap">
                <h2 class="text-dark mb-3">Reviews</h2>
                @if(_reviews.Count == 0)
                {
                    <p class="text-dark">No reviews yet.</p>
                }
                else
                {
                    @foreach (var review in _reviews)
                    {
                        <div class="card mb-3" style="border-radius: 20px;">
                            <div class="card-body">
                                <h5 class="card-title">By: @review.User.UserName</h5>
                                <p class="card-text">Comment: @review.Description</p>
                                <p class="card-text"><small class="text-muted">Rating: @review.Rate</small></p>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public string? Id { get; set; }

    private Guid MovieId => Guid.Parse(Id!);

    private int UserId { get; set; }

    private Movie? MovieInfos { get; set; }
    
    private List<Review>? _reviews;

    private string? _messageFavourites;
    private bool? _isFavouritesSuccessful;
    private string? _messageWatched;
    private bool? _isWatchedSuccessful;
    private string? _messageToWatch;
    private bool? _isToWatchSuccessful;
    
    protected override async Task OnInitializedAsync()
    {
        MovieInfos = await MovieService.GetMovieByIdAsync(MovieId);
        _reviews = await ReviewService.GetReviewsAsync(MovieId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity!.IsAuthenticated)
        {
            var userIdClaim = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
            authState.User.FindFirstValue(ClaimTypes.Name);
            if (userIdClaim == null)
            {
                Console.WriteLine("NameIdentifier claim is not present");
            }
            else
            {
                UserId = int.Parse(userIdClaim);
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }
    
    async void AddToFavourites(int userId, Guid movieId)
    {
        var isAlreadyInFavourites = await WatchlistService.IsInFavouritesAsync(userId, movieId);
        if (isAlreadyInFavourites)
        {
            _messageFavourites = "This movie is already in your watchlist Favourites";
            _isFavouritesSuccessful = false;
        }
        else
        {
            await WatchlistService.AddToFavouritesAsync(userId, movieId);
            _messageFavourites = "This movie was successfully added to your watchlist Favourites";
            _isFavouritesSuccessful = true;
        }
    }

    async void AddWatched(Guid movieId)
    {
        var isAlreadyInWatched = await WatchlistService.IsInWatchedAsync(UserId, movieId);
        if (isAlreadyInWatched)
        {
            _messageWatched = "This movie is already in your watchlist Watched.";
            _isWatchedSuccessful = false;
        }
        else
        {
            await WatchlistService.AddWatchedAsync(UserId, movieId);
            _messageWatched = "This movie was successfully added to your watchlist Watched";
            _isWatchedSuccessful = true;
        }
    }
    
    async void AddToWatch(Guid movieId)
    {
        var isAlreadyInToWatch = await WatchlistService.IsInToWatchAsync(UserId, movieId);
        if (isAlreadyInToWatch)
        {
            _messageToWatch = "This movie is already in your watchlist To Watch.";
            _isToWatchSuccessful = false;
        }
        else
        {
            await WatchlistService.AddToWatchAsync(UserId, movieId);
            _messageToWatch = "This movie was successfully added to your watchlist To Watch";
            _isToWatchSuccessful = true;
        }
    }
}