@inject NavigationManager navigationManager
@*<div class="d-flex aligns-items-center justify-content-center gap-3">
    <button class="btn btn-primary rounded-pill"></button>
    
    <span>Page @CurrentPage of @TotalPages</span>
    
    <button></button>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public int CurrentPage { get; set; }
    
    [Parameter]
    [EditorRequired]
    public int TotalPages { get; set; }
}*@

@{
    int startPage = Math.Max(CurrentPage - 2, 1);
    int endPage = Math.Min(startPage + 4, TotalPages);
    startPage = Math.Max(endPage - 4, 1);
}

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)">Previous</button>
        </li>
        @for (var i = startPage; i <= endPage; i++)
        {
            var page = i;  // Capture variable in a local scope to avoid modified closure
            <li class="page-item @(CurrentPage == page ? "active" : "")">
                <button class="page-link" @onclick="() => ChangePage(page)">@(@page)</button>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)">Next</button>
        </li>
    </ul>
</nav>



@code {
    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

   

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages)
        {
            return;
        }

        CurrentPage = page;
        await OnPageChanged.InvokeAsync(page);
    }
}