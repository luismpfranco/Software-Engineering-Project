@page "/addtowatch"
@using System.Security.Claims
@using CinemaSocial.Models.Entities
@using CinemaSocial.Repository
@using Microsoft.AspNetCore.Authorization
@inject IMovieRepository MovieRepository
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject WatchlistRepository WatchlistRepository
@attribute [Authorize(Roles = "Administrator,User")]
<PageTitle>Add to To Watch</PageTitle>

<h1>Add to To Watch</h1>

<div class="input-group mt-3 mb-3">
    <input type="text" class="form-control" placeholder="Search for a movie" @bind="_searchTerm" @oninput="UpdateSearchResults">
</div>
<div class="d-flex justify-content-center @(_isToWatchSuccessful == true ? "text-success" : "text-danger")">@_messageToWatch</div>
@if (_searchResults != null && _searchResults.Any())
{
    <div class="dropdown-menu show" style="max-height: 400px; overflow-y: auto;">
        @foreach (var movie in _searchResults)
        {
            <a class="dropdown-item" @onclick="() => AddToWatchList(_userId, movie.IdMovie)">@movie.Title</a>
        }
    </div>
}

@code {
    private string _searchTerm = string.Empty;
    private List<Movie>? _searchResults;
    int _userId;

    private string? _messageToWatch;
    private bool? _isToWatchSuccessful;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userIdClaim != null)
        {
            _userId = int.Parse(userIdClaim);
        }
    }

    private async Task UpdateSearchResults(ChangeEventArgs e)
    {
        _searchTerm = e.Value!.ToString()!;
        _searchResults = (!string.IsNullOrEmpty(_searchTerm) ? (await MovieRepository.GetMoviesAsync()).Where(m => m!.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList() : null)!;
        StateHasChanged();
    }

    async void AddToWatchList(int userId, Guid movieId)
    {
        var isAlreadyInToWatch = await WatchlistRepository.IsInToWatchAsync(userId, movieId);
        if (isAlreadyInToWatch)
        {
            _messageToWatch = "This movie is already in your watchlist To Watch";
            _isToWatchSuccessful = false;
        }
        else
        {
            await WatchlistRepository.AddToWatchAsync(userId, movieId);
            NavigationManager.NavigateTo("/watchlists");
        }
    }
}