@page "/reviews/create"
@using System.Security.Claims
@using CinemaSocial.Models.Entities
@using CinemaSocial.Repository
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IReviewRepository ReviewRepository
@inject IMovieRepository MovieRepository
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Administrator,User")]
<h3>Create a Review</h3>

@{
    if (Movies != null)
    {
        <div class="input-group mt-3 mb-3">
            <input type="text" class="form-control" placeholder="Search for a movie" @bind="_searchTerm" @oninput="UpdateSearchResults">
        </div>
        @if (_searchResults != null && _searchResults.Any())
        {
            <div class="dropdown-menu show" style="max-height: 250px; overflow-y: auto;">
                @foreach (var movie in _searchResults)
                {
                    <a class="dropdown-item" @onclick="() => SelectMovie(movie)">@movie.Title</a>
                }
            </div>
        }
        if (SelectedMovie != null)
        {
            var image = SelectedMovie.Images.FirstOrDefault(i => i.NumberUrl == "190").Url;
            <div class="mt-3 row">
                <div class="col-md-3">
                    <img src="@image" alt="@SelectedMovie.Title" style="float: right; max-width: 100%;"/>
                </div>
                <div class="col-md-9 d-flex flex-column">
                    <h4 class="p-2">@SelectedMovie.Title</h4>
                    <p class="p-2">Year: @SelectedMovie.Year</p>
                    <p class="p-2">Genres:
                        @foreach (var genre in SelectedMovie.Genre)
                        {
                            if (genre == SelectedMovie.Genre.Last())
                            {
                                <span>@genre.Description</span>
                            }
                            else
                            {
                                <span>@genre.Description, </span>
                            }
                        }
                    </p>
                    <p class="p-2">Rating: @SelectedMovie.Rating</p>
                    <p class="p-2">Description: @SelectedMovie.Description</p>
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <div class="w-50 card mt-5 p-3 bg-light d-inline-block border border-secondary" style="border-radius: 20px;">
                    <div class="card-body">
                        <div>
                            <label for="rating">Rating:</label>
                            <select id="rating" @bind="_rating" required>
                                <option value="">Select a rating</option>
                                @for (int i = 0; i <= 10; i++)
                                {
                                    <option value="@i">@i</option>
                                }
                            </select>
                        </div>
                        <div class="input-group mt-3 mb-3 w-100">
                            <textarea style="width: 100%;" @bind="_review" placeholder="Write your review here (optional)"></textarea>
                        </div>
                        <div class="d-flex justify-content-center p-3">
                            <button class="btn btn-primary" @onclick="SubmitReview">Submit Review</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading...</p>
    
    }
}

@code {
    private int _userId;
    private List<Movie>? Movies;
    private Movie? SelectedMovie { get; set; }
    private string SelectedMovieId { get; set; }
    private int _rating;
    private string? _review;
    
    private string _searchTerm { get; set; } = string.Empty;
    private List<Movie>? _searchResults;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userIdClaim != null)
        {
            _userId = int.Parse(userIdClaim);
            Movies = await MovieRepository.GetMoviesAsync();
            Guid.TryParse(SelectedMovieId, out var movieIdGuid);
            SelectedMovie = Movies.FirstOrDefault(m => m.IdMovie == movieIdGuid);
        }
    }

    private async Task SubmitReview()
    {
        _review = string.IsNullOrWhiteSpace(_review) ? "None" : _review;

        var newReview = new Review
        {
            MovieId = SelectedMovie!.IdMovie,
            UserId = _userId,
            Rate = _rating,
            Description = _review
        };

        await ReviewRepository.AddReviewAsync(newReview);
        NavigationManager.NavigateTo("/reviews");
    }

    private async Task UpdateSearchResults(ChangeEventArgs e)
    {
        _searchTerm = e.Value!.ToString()!;
        _searchResults = (!string.IsNullOrEmpty(_searchTerm) ? (await MovieRepository.GetMoviesAsync()).Where(m => m.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList() : null)!;
        StateHasChanged();
    }

    private void SelectMovie(Movie movie)
    {
        _searchTerm = movie.Title;
        SelectedMovie = movie;
        _searchResults = null;
    }
}