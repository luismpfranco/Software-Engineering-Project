@page "/watchlist"
@using System.Security.Claims
@using CinemaSocial.Models.Watchlists
@using CinemaSocial.Services
@using Microsoft.AspNetCore.Authorization
@inject WatchlistService WatchlistService
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

@* FAZER A MERDA DE OBTER O MOVIE ATRAVES DO ID QUE ESTÁ NA BASE DE DADOS  *@


<h1>My Watchlist</h1>

@if (WatchlistFavourites == null || WatchlistWatched == null || WatchlistToWatch == null)
{
    <p><em>Loading...</em></p>
}
else
{
    Console.WriteLine(WatchlistFavourites.Count);
    <h2>Favourites</h2>
    @foreach (var item in WatchlistFavourites)
    {
        if (item.MovieId != null)
        {
            <div>@item.MovieId</div>
        }
    }
    
    Console.WriteLine(WatchlistWatched.Count);
    <h2>Watched</h2>
    @foreach (var item in WatchlistWatched)
    {
        if (item.MovieId != null)
        {
            <div>@item.MovieId</div>
        }
    }

    Console.WriteLine(WatchlistToWatch.Count);
    <h2>To Watch</h2>
    @foreach (var item in WatchlistToWatch)
    {
        if (item.MovieId != null)
        {
            <div>@item.MovieId</div>
        }
    }
}

@code 
{
    private int UserId { get; set; }
    
    private List<WatchlistFavourites> WatchlistFavourites { get; set; }
    private List<WatchlistWatched> WatchlistWatched { get; set; }
    private List<WatchlistToWatch> WatchlistToWatch { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var userIdClaim = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (userIdClaim == null)
            {
                Console.WriteLine("NameIdentifier claim is not present");
            }
            else
            {
                UserId = int.Parse(userIdClaim);
                WatchlistFavourites = await WatchlistService.GetWatchlistFavouritesAsync(UserId);
                WatchlistWatched = await WatchlistService.GetWatchlistWatchedAsync(UserId);
                WatchlistToWatch = await WatchlistService.GetWatchlistToWatchAsync(UserId);
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }
}